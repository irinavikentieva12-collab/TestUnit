import asyncio
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any
from database.connection import db
from services.finance_api import finance_api


class SubscriptionService:
    def __init__(self):
        self.is_running = False
        self.task = None
    
    async def start_subscription_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if not self.is_running:
            self.is_running = True
            self.task = asyncio.create_task(self._subscription_loop())
            print("Subscription service started")
    
    async def stop_subscription_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        if self.is_running:
            self.is_running = False
            if self.task:
                self.task.cancel()
                try:
                    await self.task
                except asyncio.CancelledError:
                    pass
            print("Subscription service stopped")
    
    async def _subscription_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
        while self.is_running:
            try:
                await self._process_subscriptions()
                await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            except Exception as e:
                print(f"Error in subscription loop: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def _process_subscriptions(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        subscriptions = await self._get_all_active_subscriptions()
        
        for sub in subscriptions:
            try:
                if sub.subscription_type == 'crypto':
                    await self._send_crypto_update(sub.user_id)
                elif sub.subscription_type == 'stocks':
                    await self._send_stocks_update(sub.user_id)
                elif sub.subscription_type == 'news':
                    await self._send_news_update(sub.user_id)
            except Exception as e:
                print(f"Error processing subscription for user {sub.user_id}: {e}")
    
    async def _get_all_active_subscriptions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
    
    async def _send_crypto_update(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        trending = await finance_api.get_trending_cryptos()
        
        if trending:
            message = "üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º:\n\n"
            for i, coin in enumerate(trending[:5], 1):
                message += f"{i}. {coin['name']} ({coin['symbol']})\n"
                if coin['market_cap_rank']:
                    message += f"   –†–∞–Ω–≥: #{coin['market_cap_rank']}\n"
                message += f"   –¶–µ–Ω–∞ –≤ BTC: {coin['price_btc']:.8f}\n\n"
            
            message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /trending –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print(f"Would send crypto update to user {user_id}: {message[:100]}...")
    
    async def _send_stocks_update(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –∞–∫—Ü–∏—è–º"""
        # –≠–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ü–∏—è–º
        stocks_data = [
            {"symbol": "AAPL", "change": "+2.5%"},
            {"symbol": "GOOGL", "change": "-1.2%"},
            {"symbol": "TSLA", "change": "+5.8%"},
            {"symbol": "MSFT", "change": "+0.9%"},
            {"symbol": "AMZN", "change": "-0.7%"}
        ]
        
        message = "üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∞–∫—Ü–∏—è–º:\n\n"
        for stock in stocks_data:
            emoji = "üìà" if stock['change'].startswith('+') else "üìâ"
            message += f"{emoji} {stock['symbol']}: {stock['change']}\n"
        
        message += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /price <—Å–∏–º–≤–æ–ª> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"Would send stocks update to user {user_id}: {message[:100]}...")
    
    async def _send_news_update(self, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        # –≠–º—É–ª—è—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        news_items = [
            "üì∞ Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞ –≥–æ–¥–∞",
            "üè¶ –§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—ä—è–≤–∏–ª–∞ –æ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö",
            "üíº Tesla –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ä–∞–∑–≤–∏—Ç–∏—è",
            "üåç –ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ–≥–Ω–æ–∑—ã",
            "üìä –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–∫–∞–∑–∞–ª —Ä–µ–∫–æ—Ä–¥–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤"
        ]
        
        message = "üì∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
        for i, news in enumerate(news_items, 1):
            message += f"{i}. {news}\n"
        
        message += "\nüí° –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –∫—É—Ä—Å–µ —Å–æ–±—ã—Ç–∏–π!"
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"Would send news update to user {user_id}: {message[:100]}...")
    
    async def send_welcome_message(self, user_id: int, subscription_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ"""
        messages = {
            'crypto': "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç–∞—Ö –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–µ.",
            'stocks': "üìà –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –∞–∫—Ü–∏–π!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –∞–∫—Ü–∏–π –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –Ω–∞ —Ñ–æ–Ω–¥–æ–≤–æ–º —Ä—ã–Ω–∫–µ.",
            'news': "üì∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –≤ –º–∏—Ä–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤."
        }
        
        message = messages.get(subscription_type, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        message += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"Would send welcome message to user {user_id}: {message}")
    
    async def send_price_alert(self, user_id: int, symbol: str, current_price: float, target_price: float, alert_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
        emoji = "üìà" if alert_type == "above" else "üìâ"
        direction = "–≤—ã—à–µ" if alert_type == "above" else "–Ω–∏–∂–µ"
        
        message = f"""
üîî –¶–µ–Ω–æ–≤–æ–π –∞–ª–µ—Ä—Ç!

{emoji} {symbol.upper()} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã!

üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}
üéØ –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:,.2f}
üìä –¢–∏–ø –∞–ª–µ—Ä—Ç–∞: {direction} —Ü–µ–Ω—ã

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /alerts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞–º–∏
        """
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"Would send price alert to user {user_id}: {message}")
    
    async def check_price_alerts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã
        alerts = await self._get_all_active_alerts()
        
        for alert in alerts:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = await self._get_current_price(alert.symbol)
                
                if current_price is not None:
                    should_trigger = False
                    
                    if alert.alert_type == "above" and current_price >= alert.target_price:
                        should_trigger = True
                    elif alert.alert_type == "below" and current_price <= alert.target_price:
                        should_trigger = True
                    
                    if should_trigger:
                        await self.send_price_alert(
                            alert.user_id,
                            alert.symbol,
                            current_price,
                            alert.target_price,
                            alert.alert_type
                        )
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç
                        await self._deactivate_alert(alert.id)
                        
            except Exception as e:
                print(f"Error checking alert {alert.id}: {e}")
    
    async def _get_all_active_alerts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑ –ë–î
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        return []
    
    async def _get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_info = await finance_api.get_crypto_info(symbol.lower())
            if crypto_info:
                return crypto_info['current_price']
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∞–∫—Ü–∏–∏
            stock_info = await finance_api.get_stock_price(symbol.upper())
            if stock_info:
                return stock_info['price']
            
            return None
        except Exception as e:
            print(f"Error getting price for {symbol}: {e}")
            return None
    
    async def _deactivate_alert(self, alert_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∞–ª–µ—Ä—Ç–∞"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
        print(f"Would deactivate alert {alert_id}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫
subscription_service = SubscriptionService()
