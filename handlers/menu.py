from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.connection import db
from services.finance_api import finance_api
import re

router = Router()


class AlertStates(StatesGroup):
    waiting_for_symbol = State()
    waiting_for_price = State()
    waiting_for_type = State()


def get_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üí∞ –¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç", callback_data="menu_crypto")
    builder.button(text="üìà –¶–µ–Ω—ã –∞–∫—Ü–∏–π", callback_data="menu_stocks")
    builder.button(text="üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã", callback_data="menu_trending")
    builder.button(text="üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞", callback_data="menu_market")
    builder.button(text="üîî –ê–ª–µ—Ä—Ç—ã", callback_data="menu_alerts")
    builder.button(text="üì∞ –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscriptions")
    builder.button(text="üìö –ò—Å—Ç–æ—Ä–∏—è", callback_data="menu_history")
    builder.button(text="‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
    builder.adjust(2)
    return builder.as_markup()


def get_crypto_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    builder = InlineKeyboardBuilder()
    builder.button(text="Bitcoin", callback_data="crypto_bitcoin")
    builder.button(text="Ethereum", callback_data="crypto_ethereum")
    builder.button(text="Binance Coin", callback_data="crypto_binancecoin")
    builder.button(text="Solana", callback_data="crypto_solana")
    builder.button(text="Cardano", callback_data="crypto_cardano")
    builder.button(text="üîç –ü–æ–∏—Å–∫", callback_data="crypto_search")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()


def get_stocks_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∞–∫—Ü–∏–π"""
    builder = InlineKeyboardBuilder()
    builder.button(text="AAPL (Apple)", callback_data="stock_AAPL")
    builder.button(text="GOOGL (Google)", callback_data="stock_GOOGL")
    builder.button(text="TSLA (Tesla)", callback_data="stock_TSLA")
    builder.button(text="MSFT (Microsoft)", callback_data="stock_MSFT")
    builder.button(text="AMZN (Amazon)", callback_data="stock_AMZN")
    builder.button(text="üîç –ü–æ–∏—Å–∫", callback_data="stock_search")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()


def get_alerts_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤"""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="alert_add")
    builder.button(text="üìã –ú–æ–∏ –∞–ª–µ—Ä—Ç—ã", callback_data="alert_list")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç", callback_data="alert_remove")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()


def get_subscriptions_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üì∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="sub_crypto")
    builder.button(text="üìà –ê–∫—Ü–∏–∏", callback_data="sub_stocks")
    builder.button(text="üìä –ù–æ–≤–æ—Å—Ç–∏", callback_data="sub_news")
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    builder.adjust(2)
    return builder.as_markup()


@router.message(F.text == "/start")
async def cmd_start(message: Message):
    welcome_text = """–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ Finance Bot.

–ü–æ–ª—É—á–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∞–∫—Ü–∏–π —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –º–µ–Ω—é.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:"""
    
    await message.answer(welcome_text, reply_markup=get_main_menu())
    
    await db.save_interaction(
        user_id=message.from_user.id,
        username=message.from_user.username,
        request_text="/start",
        response_text="Welcome message"
    )


@router.callback_query(F.data == "menu_main")
async def show_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "menu_crypto")
async def show_crypto_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
        reply_markup=get_crypto_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "menu_stocks")
async def show_stocks_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–∫—Ü–∏–π"""
    await callback.message.edit_text(
        "üìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é:",
        reply_markup=get_stocks_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "menu_trending")
async def show_trending(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    trending = await finance_api.get_trending_cryptos()
    
    if trending:
        response = "üî• –¢–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:\n\n"
        for i, coin in enumerate(trending[:5], 1):
            rank = f"#{coin['market_cap_rank']}" if coin['market_cap_rank'] else ""
            response += f"{i}. {coin['name']} ({coin['symbol']}) {rank}\n"
    else:
        response = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()
    
    await db.save_interaction(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        request_text="trending",
        response_text=response
    )


@router.callback_query(F.data == "menu_market")
async def show_market(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–∑–æ—Ä —Ä—ã–Ω–∫–∞"""
    market_data = await finance_api.get_market_summary()
    
    if market_data:
        response = f"""üìä –°–≤–æ–¥–∫–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞

üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_data['total_market_cap']:,.0f}
üìà –û–±—â–∏–π –æ–±—ä–µ–º (24—á): ${market_data['total_volume']:,.0f}
üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ (24—á): {market_data['market_cap_change_24h']:.2f}%
ü™ô –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {market_data['active_cryptocurrencies']:,}

üèÜ –¢–æ–ø-5 –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏:
"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        top_coins = ['bitcoin', 'ethereum', 'binancecoin', 'solana', 'cardano']
        for coin_id in top_coins:
            coin_info = await finance_api.get_crypto_price(coin_id)
            if coin_info:
                response += f"‚Ä¢ {coin_id.title()}: ${coin_info['price']:,.2f}\n"
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()
    
    await db.save_interaction(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        request_text="market",
        response_text=response
    )


@router.callback_query(F.data == "menu_alerts")
async def show_alerts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–ª–µ—Ä—Ç–æ–≤"""
    await callback.message.edit_text(
        "üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏:",
        reply_markup=get_alerts_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "menu_subscriptions")
async def show_subscriptions_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    subscriptions = await db.get_user_subscriptions(callback.from_user.id)
    
    response = "üì∞ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    sub_types = {
        'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'stocks': '–ê–∫—Ü–∏–∏',
        'news': '–ù–æ–≤–æ—Å—Ç–∏'
    }
    
    for sub_type, name in sub_types.items():
        sub = next((s for s in subscriptions if s.subscription_type == sub_type), None)
        status = "‚úÖ –ü–æ–¥–ø–∏—Å–∞–Ω" if sub and sub.is_active else "‚ùå –ù–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
        response += f"{name}: {status}\n"
    
    await callback.message.edit_text(response, reply_markup=get_subscriptions_menu())
    await callback.answer()


@router.callback_query(F.data == "menu_history")
async def show_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤"""
    interactions = await db.get_user_interactions(callback.from_user.id, limit=5)
    
    if interactions:
        response = "üìö –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n\n"
        for i, interaction in enumerate(interactions, 1):
            response += f"{i}. {interaction.request_text}\n"
            response += f"   üìÖ {interaction.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    else:
        response = "üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()
    
    await db.save_interaction(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        request_text="history",
        response_text="–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"
    )


@router.callback_query(F.data == "menu_help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É:

üí∞ –¶–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
üìà –¶–µ–Ω—ã –∞–∫—Ü–∏–π - –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π
üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã - —Ç–æ–ø –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
üìä –û–±–∑–æ—Ä —Ä—ã–Ω–∫–∞ - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞
üîî –ê–ª–µ—Ä—Ç—ã - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
üì∞ –ü–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
üìö –ò—Å—Ç–æ—Ä–∏—è - –≤–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã

–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–ª–∏ –∞–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ü–æ–∏—Å–∫" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö."""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")
    
    await callback.message.edit_text(help_text, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("crypto_"))
async def handle_crypto_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    symbol = callback.data.split("_")[1]
    
    crypto_info = await finance_api.get_crypto_info(symbol)
    
    if crypto_info:
        price_change = crypto_info['price_change_percentage_24h']
        change_emoji = "üìà" if price_change >= 0 else "üìâ"
        response = f"""üí∞ {crypto_info['name']} ({crypto_info['symbol']})

–¶–µ–Ω–∞: ${crypto_info['current_price']:,.2f}
{change_emoji} –ó–∞ 24—á: {price_change:+.2f}%
–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${crypto_info['market_cap']:,.0f}
–û–±—ä–µ–º: ${crypto_info['volume_24h']:,.0f}"""
    else:
        response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º", callback_data="menu_crypto")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()
    
    await db.save_interaction(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        request_text=f"crypto_{symbol}",
        response_text=response
    )


@router.callback_query(F.data.startswith("stock_"))
async def handle_stock_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ü–∏–∏"""
    symbol = callback.data.split("_")[1]
    
    stock_info = await finance_api.get_stock_price(symbol)
    
    if stock_info:
        response = f"""üìà {stock_info['symbol']}

–¶–µ–Ω–∞: ${stock_info['price']:,.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {stock_info['change']:+.2f} ({stock_info['change_percent']})
–û–±—ä–µ–º: {stock_info['volume']:,}"""
    else:
        response = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏—è–º", callback_data="menu_stocks")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()
    
    await db.save_interaction(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        request_text=f"stock_{symbol}",
        response_text=response
    )


@router.callback_query(F.data == "crypto_search")
async def crypto_search_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    await state.set_state(AlertStates.waiting_for_symbol)
    await state.update_data(search_type="crypto")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: bitcoin, ethereum):"
    )
    await callback.answer()


@router.callback_query(F.data == "stock_search")
async def stock_search_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞–∫—Ü–∏–∏"""
    await state.set_state(AlertStates.waiting_for_symbol)
    await state.update_data(search_type="stock")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: AAPL, GOOGL):"
    )
    await callback.answer()


@router.message(AlertStates.waiting_for_symbol)
async def process_symbol_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–∏–º–≤–æ–ª–∞ (–ø–æ–∏—Å–∫ –∏–ª–∏ –∞–ª–µ—Ä—Ç)"""
    data = await state.get_data()
    search_type = data.get("search_type")
    alert_mode = data.get("alert_mode")
    symbol = message.text.lower().strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –∞–ª–µ—Ä—Ç–∞
    if alert_mode:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
        crypto_info = await finance_api.get_crypto_info(symbol)
        if not crypto_info:
            stock_info = await finance_api.get_stock_price(symbol.upper())
            if not stock_info:
                await message.answer(f"‚ùå –°–∏–º–≤–æ–ª '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–∏–º–≤–æ–ª.")
                return
        
        await state.update_data(symbol=symbol)
        await state.set_state(AlertStates.waiting_for_price)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {symbol.upper()} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000):")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    if search_type == "crypto":
        info = await finance_api.get_crypto_info(symbol)
        if info:
            price_change = info['price_change_percentage_24h']
            change_emoji = "üìà" if price_change >= 0 else "üìâ"
            response = f"""üí∞ {info['name']} ({info['symbol']})

–¶–µ–Ω–∞: ${info['current_price']:,.2f}
{change_emoji} –ó–∞ 24—á: {price_change:+.2f}%
–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${info['market_cap']:,.0f}
–û–±—ä–µ–º: ${info['volume_24h']:,.0f}"""
        else:
            response = f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ '{symbol}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    else:
        info = await finance_api.get_stock_price(symbol.upper())
        if info:
            response = f"""üìà {info['symbol']}

–¶–µ–Ω–∞: ${info['price']:,.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {info['change']:+.2f} ({info['change_percent']})
–û–±—ä–µ–º: {info['volume']:,}"""
        else:
            response = f"‚ùå –ê–∫—Ü–∏—è '{symbol.upper()}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    builder = InlineKeyboardBuilder()
    if search_type == "crypto":
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º", callback_data="menu_crypto")
    else:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–∫—Ü–∏—è–º", callback_data="menu_stocks")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await message.answer(response, reply_markup=builder.as_markup())
    await state.clear()
    
    await db.save_interaction(
        user_id=message.from_user.id,
        username=message.from_user.username,
        request_text=f"search_{symbol}",
        response_text=response
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤
@router.callback_query(F.data == "alert_add")
async def alert_add_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
    await state.set_state(AlertStates.waiting_for_symbol)
    await state.update_data(alert_mode=True)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏–ª–∏ –∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: bitcoin):"
    )
    await callback.answer()


@router.callback_query(F.data == "alert_list")
async def alert_list_show(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤"""
    alerts = await db.get_user_alerts(callback.from_user.id)
    
    if alerts:
        response = "üîî –í–∞—à–∏ —Ü–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã:\n\n"
        for alert in alerts:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if alert.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            response += f"ID: {alert.id}\n"
            response += f"–°–∏–º–≤–æ–ª: {alert.symbol.upper()}\n"
            response += f"–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${alert.target_price:,.2f}\n"
            response += f"–¢–∏–ø: {alert.alert_type}\n"
            response += f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
    else:
        response = "üîî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–Ω–æ–≤—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", callback_data="menu_alerts")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data == "alert_remove")
async def alert_remove_prompt(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
    alerts = await db.get_user_alerts(callback.from_user.id)
    
    if not alerts:
        response = "üîî –£ –≤–∞—Å –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        builder = InlineKeyboardBuilder()
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", callback_data="menu_alerts")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
        await callback.message.edit_text(response, reply_markup=builder.as_markup())
        await callback.answer()
        return
    
    response = "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–µ—Ä—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    builder = InlineKeyboardBuilder()
    
    for alert in alerts:
        builder.button(
            text=f"{alert.symbol.upper()} - ${alert.target_price:,.2f}",
            callback_data=f"delete_alert_{alert.id}"
        )
    
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", callback_data="menu_alerts")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    builder.adjust(1)
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("delete_alert_"))
async def delete_alert(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
    alert_id = int(callback.data.split("_")[2])
    
    success = await db.delete_price_alert(alert_id, callback.from_user.id)
    
    if success:
        response = "‚úÖ –ê–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"
    else:
        response = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç."
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", callback_data="menu_alerts")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@router.callback_query(F.data.startswith("sub_"))
async def process_subscription_toggle(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    sub_type = callback.data.split("_")[1]  # crypto, stocks, news
    
    subscription = await db.toggle_subscription(
        user_id=callback.from_user.id,
        subscription_type=sub_type
    )
    
    sub_names = {
        'crypto': '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
        'stocks': '–ê–∫—Ü–∏–∏',
        'news': '–ù–æ–≤–æ—Å—Ç–∏'
    }
    
    status = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if subscription.is_active else "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    response = f"{sub_names[sub_type]}: {status}"
    
    await callback.message.answer(response)
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    await show_subscriptions_menu(callback)





@router.message(AlertStates.waiting_for_price)
async def process_alert_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –¥–ª—è –∞–ª–µ—Ä—Ç–∞"""
    try:
        price = float(message.text.strip())
        if price <= 0:
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
        return
    
    await state.update_data(target_price=price)
    await state.set_state(AlertStates.waiting_for_type)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìà –í—ã—à–µ —Ü–µ–Ω—ã", callback_data="alert_above")
    builder.button(text="üìâ –ù–∏–∂–µ —Ü–µ–Ω—ã", callback_data="alert_below")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("alert_"))
async def process_alert_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –∞–ª–µ—Ä—Ç–∞"""
    if callback.data == "alert_add":
        return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—ã—à–µ
    
    alert_type = callback.data.split("_")[1]  # above –∏–ª–∏ below
    
    data = await state.get_data()
    symbol = data.get("symbol")
    target_price = data.get("target_price")
    
    # –°–æ–∑–¥–∞–µ–º –∞–ª–µ—Ä—Ç
    alert = await db.add_price_alert(
        user_id=callback.from_user.id,
        symbol=symbol,
        target_price=target_price,
        alert_type=alert_type
    )
    
    alert_type_text = "–≤—ã—à–µ" if alert_type == "above" else "–Ω–∏–∂–µ"
    response = f"""‚úÖ –ê–ª–µ—Ä—Ç —Å–æ–∑–¥–∞–Ω!

–°–∏–º–≤–æ–ª: {symbol.upper()}
–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞: ${target_price:,.2f}
–¢–∏–ø: {alert_type_text} —Ü–µ–Ω—ã
ID –∞–ª–µ—Ä—Ç–∞: {alert.id}"""
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–ª–µ—Ä—Ç–∞–º", callback_data="menu_alerts")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu_main")
    
    await callback.message.edit_text(response, reply_markup=builder.as_markup())
    await state.clear()
    await callback.answer()
